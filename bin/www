#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('orders-bot:server');
const https = require('https');
const fs = require('fs');

// const ngrok = require('../src/get_public_url');
const ViberBot = require('viber-bot').Bot;
const BotEvents = require('viber-bot').Events;
const TextMessage = require('viber-bot').Message.Text;

const qs = require('qs');
const fetch = require("node-fetch");

require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

const bot = new ViberBot({
  authToken: process.env.TOKEN,
  name: process.env.NAME,
  avatar: process.env.AVATAR
});

bot.on(BotEvents.MESSAGE_RECEIVED, (message, response) => {
  // Echo's back the message to the client. Your bot logic should sit here.
  console.log('----------------------------------------------------------------');
  console.log('New message: ', message.text);
  console.log('From: ', response.userProfile.id, );
  console.log('Name: ', response.userProfile.name);
  bot.sendMessage({id: process.env.ADMIN_ID}, new TextMessage(`New message from user: ${response.userProfile.id} ${response.userProfile.name}: ${message.text}`));
  const usersArr = JSON.parse(process.env.USERS_STR).users;
  // console.log('Users: ', usersArr);
  if(usersArr.some((userObj) => userObj.viber_id === response.userProfile.id)) {
    const orderNumber = strToOrderNumber(message.text.trim());
    if(orderNumber) {
      if(!process.env.ST) {
        console.error('Env variable error');
        response.send(new TextMessage('Ошибка сервера'));
        return;
      }
      getParsedOrderData(orderNumber, process.env.ST)
          .then((orderObj) => {
            if(orderObj && orderObj.data) {
              const text = Object.keys(orderObj.data).reduce((acc, key) => {
                acc = `${acc} ${key}: ${orderObj.data[key].trim()}\n`;
                return acc;
              }, '');
              // console.log('Text: ', text);
              response.send(new TextMessage(text));
            } else {
              response.send(new TextMessage('Ошибка сервера. Нет данных о заказе'));
            }
            if(orderObj && orderObj.status) {
              const text = Object.keys(orderObj.status).reduce((acc, key) => {
                if(orderObj.status.isDone) {
                  acc = `${acc} ${key.slice(1, -1)}: ${orderObj.status[key].doneDate.toLocaleString()} ${orderObj.status[key].userAccessStr}\n`;
                } else {
                  acc = `${acc} ${key.slice(1, -1)}: -\n`;
                }
                return acc;
              }, '');
              // console.log('Text: ', text);
              response.send(new TextMessage(text));
            } else {
              response.send(new TextMessage('Ошибка сервера. Нет данных о статусе'));
            }
          })
    } else {
      response.send(new TextMessage('Неверный номер'));
    }
  } else {
    const message = new TextMessage('Нет доступа');
    console.log('Unknown user: ', response.userProfile);
    bot.getUserDetails(response.userProfile)
        .then(userDetails  => {
          bot.sendMessage({id: process.env.ADMIN_ID}, new TextMessage(`Unknown user: ${response.userProfile.id} ${response.userProfile.name}`));
        })
    response.send(message);
  }
});

const keyPathStr = `${process.env.SSL_KEY_PATH_FILE}`;
const certPathStr = `${process.env.SSL_CERT_PATH_FILE}`;
const caPathStr = `${process.env.SSL_CA_PATH_FILE}`;
console.log("SSL options: ", keyPathStr, certPathStr, caPathStr);
const serverSSLOptions = {
  key: fs.readFileSync(keyPathStr),
  cert: fs.readFileSync(certPathStr),
  ca: fs.readFileSync(caPathStr),
};

const server = https.createServer(serverSSLOptions, bot.middleware()).listen(port, () => bot.setWebhook(`${process.env.PUBLIC_URL}:${port}`));

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const strToOrderNumber = (str) => {
  try {
    const orderNumber = parseInt(str.replace(/ /g, ''));
    if(orderNumber) {
      console.log('Correct request. Order number: ', orderNumber);
      return orderNumber;
    } else {
      console.log('Incorrect request. No success.');
      return false;
    }
  } catch(e) {
    console.log('Incorrect request. No success.');
    return false;
  }
}

const getParsedOrderData = async (orderNumber, st) => {
  if(!orderNumber) return false;
  const result = await getRawOrderData(orderNumber, st);
  console.log(`[${new Date().toLocaleString()}] orderDataFromDb: `, result);
  let orderObj = {};
  if(("data" in result) && result.data) {
    try {
      orderObj.data = parseOrderDataString(result.data);
      if(("status" in result) && result.status) {
        orderObj.status = parseOrderSitesString(result.status);
      }
    } catch (e) {
      return false;
    }
  } else {
    return false;
  }
  console.log('parsed order obj: ', orderObj);
  return orderObj;
};

const getRawOrderData = async(orderNumber, st) => {

  const queue = qs.stringify({
    "st": st,
    "orderNumber": orderNumber
  });

  const url = `${process.env.ORDERSWORKER_ADDR}getOrderData?${queue}`;

  try {
    return await fetch(url)
        .then((response) => {
          // console.log("Order data response: ", response);
          return response.text();
        })
        .then((data) => {
          // console.log("Order data response text: ", data);
          return JSON.parse(data);
        });
  } catch (e) {
    console.log(`[${new Date().toLocaleString()}] getOrderData error: `, e);
    return {};
  }

};

const parseOrderDataString = (str) => {
  // const orderDataArray = str.split(';');
  const orderDataArray = [];
  let fieldStr = '';
  let isQuote = false;
  for(let i = 0; i < str.length; i++) {
    if(str[i] === "\"" && isQuote) {
      isQuote = false;
      // orderDataArray.push(fieldStr);
      // fieldStr = '';
      continue;
    }
    if(str[i] === "\"" && !isQuote) {
      isQuote = true;
      continue;
    }
    if(str[i] === ";" && isQuote) {
      fieldStr = fieldStr + ";";
      continue;
    }
    if(str[i] === ";" && !isQuote) {
      orderDataArray.push(fieldStr);
      fieldStr = '';
      continue;
    }
    fieldStr = fieldStr + str[i];
  }
  if(fieldStr.length) {
    orderDataArray.push(fieldStr);
  }
  // console.log('orderDataArray: ', orderDataArray);
  // let orderDataKeys = [
  //   'order',
  //   'createDate',
  //   'releaseDate',
  //   'product',
  //   'workType',
  //   'count',
  //   'material',
  //   'description',
  //   'additionalInfo',
  //   'manager',
  //   'office',
  //   'client',
  //   'approveDate'
  // ];
  const orderDataKeys = [
    'Номер заказа',
    'Заведён',
    'Отгрузка',
    'Название',
    'Вид работ',
    'Тираж',
    'Материал',
    'Описание',
    'Доп. инфо',
    'Менеджер',
    'Филиал',
    'Доставка',
    'Заказчик',
    'Дата согласования',
    'Стоимость',
    'Тип-1',
    'Тип-2',
    'Готовность',
    'Инфо по доставке',
    'Нечто',
    'Способ отправки'
  ];
  const orderDataObj = orderDataKeys.reduce((acc, key, index) => {
    if(orderDataArray[index] !== undefined) {
      acc[key] = orderDataArray[index][0] === "\"" ? orderDataArray[index].slice(1, orderDataArray[index].length - 1) : orderDataArray[index];
    }
    return acc;
  }, {});
  // console.log('Order data obj: ', orderDataObj);
  return orderDataObj;
};

const parseOrderSitesString = (str) => {
  const linesArr= str.trim().split(/\r?\n/);
  const obj = linesArr.reduce((acc, statusStr) => {
    console.log('status string: ', statusStr);
    const fieldsArr = statusStr.split(";");
    console.log('fields: ', fieldsArr);
    const key = fieldsArr[0];
    console.log('key: ', key);
    acc[key] = {
      isDone: !!parseInt(fieldsArr[1])
    }
    if(fieldsArr[2].length) {
      acc[key].doneDate = parse(fieldsArr[2], 'd.M.yyyy H:mm:ss', new Date());
      acc[key].userAccessStr = fieldsArr[3].slice(1, -1);
    }
    return acc;
  }, {});

  console.log('parse order sites result: ', obj);

  return obj;
}
